---
# file: tasks/install-redis-exporter.yml
#
# Install Prometheus redis-exporter.
#
# @see http://prometheus.io/docs/introduction/getting_started/
#
- name: Check if systemd or not
  command: ps -p 1 -o comm=
  register: sys

- name: set internal variables for convenience
  set_fact:
    prometheus_exporter_subdir: "{{ prometheus_install_path }}/{{ item }}-{{ prometheus_exporters_dict[item]['version'] }}.{{ prometheus_platform_suffix }}"

- name: log subdir
  debug:
    msg: "Prometheus exporter dir is {{ prometheus_exporter_subdir }}"

- name: set daemon dir
  set_fact:
    prometheus_exporter_daemon_dir: "{{ prometheus_exporter_subdir }}"

- name: set prometheus exporter opts
  set_fact:
    prometheus_exporter_opts: "{{ vars['prometheus_' + item + '_opts'] }}"
  when: vars['prometheus_' + item + '_opts'] is defined

- name: set prometheus exporter binary path
  set_fact:
    prometheus_exporter_binary_path: "{{ prometheus_exporters_dict[item]['binary_path'] if (prometheus_exporters_dict[item]['binary_path'] is defined) else prometheus_exporter_daemon_dir + '/' + item }}"


- name: Check if '{{ item }}' already installed...
  stat:
    path: "{{ prometheus_exporter_binary_path }}"
  register: '{{ item }}_stat'

- block:

    - name: Ensure daemon dir exists
      file: 
        path: "{{ prometheus_exporter_subdir }}"
        state: directory

    - name: download and untar '{{ item }}' tarball
      unarchive:
        src: "{{ prometheus_exporters_dict[item]['url'] }}"
#        dest: '{{ prometheus_exporter_subdir }}'
        dest: "{{ prometheus_install_path if (prometheus_exporters_dict[item]['subdir'] is not defined) else prometheus_exporter_subdir }}"
        copy: no
      when: (prometheus_exporters_dict[item]['url'] is defined) and ({{ item }}_stat.stat.exists == False)
      notify: restart {{ item }}

    - name: download '{{ item }}' and put to maindir
      get_url:
        url: "{{ prometheus_exporters_dict[item]['binary_url'] }}"
        dest: '{{ prometheus_exporter_subdir }}'
      when: ( prometheus_exporters_dict[item]['binary_url'] is defined) and ({{ item }}_stat.stat.exists == False)
      notify: restart {{ item }}


- name: set permissions, owner and group
  file:
    path: "{{ prometheus_exporter_binary_path }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: 0750

- name: mkdir for data
  file:
    path: "{{ prometheus_db_path }}"
    state: directory
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: "u=rwx,g=rx,o="

- name: set '{{ item }}' variables
  copy: src="../files/etc-default-{{ item }}"  dest=/etc/default/{{ item }}
  register: '{{ item }}_config'

- name: install exporter config file
  template: src="{{ playbook_dir }}/conf/{{ item }}.yml"  dest="{{ prometheus_config_path }}/{{ item }}.yml"
  when: prometheus_exporters_dict[item]['conf'] is defined
  notify:
    - restart {{ item }}

- name: copy mysqld_exporter config
  template:
    src: "library/templates/my.cnf.j2"
    dest: "{{ prometheus_exporter_daemon_dir }}/my.cnf" 
  when: item == 'mysqld_exporter'

- name: copy INIT script to server
  template: src="../templates/exporter.sysvinit.{{ ansible_os_family|lower }}.sh.j2"  dest="/etc/init.d/{{ item }}"  mode="a+x"
  when: sys.stdout == "init"

- name: copy systemd config to server
  template: src="../templates/exporter.service.j2"  dest="/lib/systemd/system/{{ item }}.service"
  when: sys.stdout == "systemd"

- name: set INIT status and start
  service: name='{{ item }}' enabled=yes state=restarted
